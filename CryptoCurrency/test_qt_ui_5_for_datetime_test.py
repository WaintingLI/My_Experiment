# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import datetime
import threading
import time
from queue import Queue
from queue import Empty
from PyQt6 import QtCore, QtGui, QtWidgets
import connect_account_order_test_core
import signal
#from signal import pthread_kill, SIGTSTP

class textBrowser_terminal(threading.Thread):
    """
    使用TextBrowser來顯示副程式print資訊
    Args:
        threading (_type_): 宣告種類
    """
    def __init__(self, queue:Queue, textBrowser:QtWidgets.QTextBrowser, prgress_bar:QtWidgets.QProgressBar):
        """_summary_
        宣告後立即會執行的東西
        Args:
            queue (Queue): 都進來的存列
            total_num (int): 總資料筆數
        """
        threading.Thread.__init__(self)
        self.queue = queue
        self.text_Browser = textBrowser
        self.prgress_bar = prgress_bar

    def run(self):
        while True:
            try:
                #print("獲取存列資料")
                get_value = self.queue.get(timeout=20)
                self.queue.task_done()
                get_int = int(get_value)
                self.prgress_bar.setValue(get_int)
                """
                if get_value == None:
                    time.sleep(10)
                    continue
                """
                #get_str = str(get_value)
                #time.sleep(0.002)
                #self.text_Browser.append(get_str)
                if get_int >= 100:
                    break
            except Empty:
                break

class Ui_Form(object):
    """建立UI
    Args:
        object (_type_): any
    """
    def setupUi(self, Form:QtWidgets.QWidget):
        Form.setObjectName("Form")
        Form.resize(892, 594)
        Form.setFixedSize(Form.width(), Form.height())
        self.Back_test_Button = QtWidgets.QPushButton(parent=Form)
        self.Back_test_Button.setGeometry(QtCore.QRect(340, 70, 75, 23))
        self.Back_test_Button.setObjectName("Back_test_Button")
        self.Connect_real_account_Button = QtWidgets.QPushButton(parent=Form)
        self.Connect_real_account_Button.setGeometry(QtCore.QRect(810, 40, 80, 25))
        self.Connect_real_account_Button.setObjectName("Connect_real_account_Button")
        self.label_2 = QtWidgets.QLabel(parent=Form)
        self.label_2.setGeometry(QtCore.QRect(40, 100, 71, 21))
        self.label_2.setObjectName("label_2")
        self.End_dateTimeEdit = QtWidgets.QDateTimeEdit(parent=Form)
        self.End_dateTimeEdit.setGeometry(QtCore.QRect(140, 100, 161, 22))
        self.End_dateTimeEdit.setObjectName("End_dateTimeEdit")
        self.Start_dateTimeEdit = QtWidgets.QDateTimeEdit(parent=Form)
        self.Start_dateTimeEdit.setGeometry(QtCore.QRect(140, 70, 161, 20))
        self.Start_dateTimeEdit.setTime(QtCore.QTime(13, 0, 0))
        self.Start_dateTimeEdit.setObjectName("Start_dateTimeEdit")
        self.label = QtWidgets.QLabel(parent=Form)
        self.label.setGeometry(QtCore.QRect(40, 60, 81, 38))
        self.label.setObjectName("label")
        self.textBrowser = QtWidgets.QTextBrowser(parent=Form)
        self.textBrowser.setGeometry(QtCore.QRect(30, 160, 841, 381))
        self.textBrowser.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.textBrowser.setObjectName("textBrowser")
        self.label_3 = QtWidgets.QLabel(parent=Form)
        self.label_3.setGeometry(QtCore.QRect(40, 10, 51, 20))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.widget = QtWidgets.QWidget(parent=Form)
        self.widget.setGeometry(QtCore.QRect(690, 40, 121, 51))
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.radioButton_connect_real_account = QtWidgets.QRadioButton(parent=self.widget)
        self.radioButton_connect_real_account.setObjectName("radioButton_connect_real_account")
        self.verticalLayout.addWidget(self.radioButton_connect_real_account)
        self.radioButton_connect_virtual_account = QtWidgets.QRadioButton(parent=self.widget)
        self.radioButton_connect_virtual_account.setObjectName("radioButton_connect_virtual_account")
        self.verticalLayout.addWidget(self.radioButton_connect_virtual_account)
        self.lineEdit_API = QtWidgets.QLineEdit(parent=Form)
        self.lineEdit_API.setGeometry(QtCore.QRect(130, 10, 431, 21))
        self.lineEdit_API.setObjectName("lineEdit_API")
        self.lineEdit_SCRET = QtWidgets.QLineEdit(parent=Form)
        self.lineEdit_SCRET.setGeometry(QtCore.QRect(130, 40, 431, 21))
        self.lineEdit_SCRET.setClearButtonEnabled(False)
        self.lineEdit_SCRET.setObjectName("lineEdit_SCRET")
        self.label_4 = QtWidgets.QLabel(parent=Form)
        self.label_4.setGeometry(QtCore.QRect(20, 40, 91, 20))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.progressBar = QtWidgets.QProgressBar(parent=Form)
        self.progressBar.setGeometry(QtCore.QRect(30, 560, 841, 23))
        self.progressBar.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setValue(0)
        self.progressBar.setFormat("%p%")
        self.progressBar.setObjectName("progressBar")
        self.get_message_timer = QtCore.QTimer()
        self.radioButton_connect_virtual_account.setChecked(True)
        self.Connect_real_account_Button.setDisabled(True)
        self.radioButton_connect_virtual_account.toggled.connect(lambda:self.check_connect_real_account())
        self.lineEdit_API.setText(connect_account_order_test_core.API_KEY)
        self.lineEdit_SCRET.setText(connect_account_order_test_core.SECRET_KEY)
        self.lineEdit_API.textChanged.connect(lambda:self.set_api_scret())
        self.lineEdit_SCRET.textChanged.connect(lambda:self.set_api_scret())
        self.textBrowser_Queue = Queue()
        self.textBrowser.textChanged.connect(lambda:self.qtextbrowser_roll_to_bottom())
        self.Connect_real_account_Button.clicked.connect(lambda:self.connect_real_account_Button_clicked())
        
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.thread = threading.Thread(target=self.conduct_proce)
        self.thread.daemon = True
        
    def retranslateUi(self, Form:QtWidgets.QWidget):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "測試自動交易介面"))
        self.Back_test_Button.setText(_translate("Form", "開始"))
        self.Connect_real_account_Button.setText(_translate("Form", "連線實體帳戶"))
        self.label_2.setText(_translate("Form", "End Date Time"))
        self.End_dateTimeEdit.setDisplayFormat(_translate("Form", "yyyy/M/d  hh:mm:ss"))
        self.Start_dateTimeEdit.setDisplayFormat(_translate("Form", "yyyy/M/d  hh:mm:ss"))
        self.label.setText(_translate("Form", "Start Date Time"))
        self.label_3.setText(_translate("Form", "API"))
        self.radioButton_connect_real_account.setText(_translate("Form", "連接實體帳戶"))
        self.radioButton_connect_virtual_account.setText(_translate("Form", "模擬回測"))
        self.label_4.setText(_translate("Form", "SECRET"))
        self.lineEdit_SCRET.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
        self.Back_test_Button.clicked.connect(lambda:self.Show_data())
        self.End_dateTimeEdit.setDateTime(QtCore.QDateTime().currentDateTime())
        #connect_account_order_test_core.#print_terminal = self.textBrowser_Queue
        #connect_account_order_test_core.print_progress_bar = self.progressBar
        
    def Show_data(self):
        """會計算回測資料,並且輸出所選取的日期的csv資料
        """
        get_datetime = self.Start_dateTimeEdit.text()
        get_datetime_c = datetime.datetime.strptime(get_datetime,"%Y/%m/%d  %H:%M:%S")
        get_datetime_c_str = get_datetime_c.strftime("%Y-%m-%d  %H:%M:%S")
        connect_account_order_test_core.Start_time_str = str(get_datetime_c.strftime("%Y-%m-%d  %H:%M:%S"))
        output_message = "起始日期:"+ get_datetime_c_str 
        get_datetime = self.End_dateTimeEdit.text()
        get_datetime_c = datetime.datetime.strptime(get_datetime,"%Y/%m/%d  %H:%M:%S")
        get_datetime_c.strftime("%Y-%m-%d  %H:%M:%S")
        get_datetime_c_str = get_datetime_c.strftime("%Y-%m-%d  %H:%M:%S")
        connect_account_order_test_core.End_time_str = str(get_datetime_c.strftime("%Y-%m-%d  %H:%M:%S"))
        output_message = output_message+ "~ 結束日期:"+ get_datetime_c_str 
        #2019-01-01 0:0:0.0
        #送出的信息
        
        self.textBrowser.append(output_message)
        #print("get_datetime_c =",get_datetime_c,type(get_datetime_c))
        #connect_account_order_test_core.main_function()
        self.Back_test_Button.setDisabled(True)
        self.radioButton_connect_real_account.setDisabled(True)
        self.radioButton_connect_virtual_account.setDisabled(True)
        while True:
            if not self.thread.is_alive():
                self.thread = None
                self.thread = threading.Thread(target=self.conduct_proce)
                self.thread.daemon = True
                break
            print("thread.is_alive")
        self.thread.start()
        self.get_message_timer.timeout.connect(lambda:self.timer_get_data())
        self.get_message_timer.start(1)
        '''
        使用threading 去接收資料
        self.textBrowser_Queue_thread = textBrowser_terminal(self.textBrowser_Queue, self.textBrowser, self.progressBar)
        self.textBrowser_Queue_thread.daemon =True
        self.textBrowser_Queue_thread.start()
        '''

    
    def check_connect_real_account(self):
        """切換為實體帳戶時,檢查API_KEY與Scret_key是否正常
        """
        print("self.radioButton_connect_virtual_account.isChecked() =",self.radioButton_connect_virtual_account.isChecked())
        if self.radioButton_connect_virtual_account.isChecked():
            connect_account_order_test_core.Virtual_flag = True
            self.Back_test_Button.setDisabled(False)
            self.Connect_real_account_Button.setDisabled(True)
        else:
            connect_account_order_test_core.Virtual_flag = False
            if connect_account_order_test_core.get_balance() == None:
                self.textBrowser.append("無法連線實體帳戶")
                self.radioButton_connect_virtual_account.setChecked(True)
                connect_account_order_test_core.Virtual_flag = True
            else:
                self.Back_test_Button.setDisabled(True)
                self.Connect_real_account_Button.setDisabled(False)

    
    def connect_real_account_Button_clicked(self):
        """按下實體按鍵後,會改變按鍵顯示資訊
        """
        print(self.Connect_real_account_Button.text())
        if self.Connect_real_account_Button.text() == "終止連線":
            self.Connect_real_account_Button.setText("連線實體帳戶")
            connect_account_order_test_core.Force_stop_flag = True
            self.radioButton_connect_real_account.setDisabled(False)
            self.radioButton_connect_virtual_account.setDisabled(False)
            time.sleep(1)
        else:
            self.Connect_real_account_Button.setText("終止連線")
            self.radioButton_connect_real_account.setDisabled(True)
            self.radioButton_connect_virtual_account.setDisabled(True)
            while True:
                if not self.thread.is_alive():
                    self.thread = None
                    self.thread = threading.Thread(target=self.conduct_proce)
                    self.thread.daemon = True
                    break
                print("thread.is_alive")
                time.sleep(1)
            self.thread.start()
    
    def conduct_proce(self):
        """使用多執行續,在回測開始時,來額外執行回測計算,並且使用另外一個執行續來顯示資料
        """
        #self.textBrowser_Queue_thread = textBrowser_terminal(self.textBrowser_Queue, self.textBrowser)
        #self.textBrowser_Queue_thread.daemon =True
        #self.textBrowser_Queue_thread.start()
        #self.textBrowser.append(connect_account_order_test_core.main_function(self.textBrowser_Queue))
        print("conduct_proce testing")
        self.textBrowser.append(connect_account_order_test_core.main_function(self.textBrowser_Queue))
        self.Back_test_Button.setDisabled(False)
        self.radioButton_connect_real_account.setDisabled(False)
        self.radioButton_connect_virtual_account.setDisabled(False)
        print("conduct_proce testing_結束")

    def set_api_scret(self):
        """當API與SCRET更改的時候,會自動更新
        """
        #self.textBrowser.append(self.lineEdit_API.text())
        #self.textBrowser.append(self.lineEdit_SCRET.text())
        self.textBrowser.append("更新API與SCRET KEY")
        connect_account_order_test_core.API_KEY = self.lineEdit_API.text()
        connect_account_order_test_core.SECRET_KEY = self.lineEdit_SCRET.text()
        connect_account_order_test_core.um_futures_client = connect_account_order_test_core.UMFutures(
            key=connect_account_order_test_core.API_KEY,
            secret=connect_account_order_test_core.SECRET_KEY,
            base_url = connect_account_order_test_core.BASE_URL
        )
         
    def qtextbrowser_roll_to_bottom(self):
        """自動化動視窗到底部
        """
        verti_bar = self.textBrowser.verticalScrollBar()
        verti_bar.setValue(verti_bar.maximum())
    
    def timer_get_data(self):
        """使用timer來更新Ui
        """
        get_queue = self.textBrowser_Queue
        #get_value = self.queue.get(timeout=20)
        if connect_account_order_test_core.Virtual_flag:
            #當在模擬回測時
            try:
                get_value = get_queue.get(timeout=1)
                print("type(get_value)=",type(get_value))
                get_queue.task_done()
                if isinstance(get_value,str):
                    #當輸入值為字串時,忽略
                    pass
                else:
                    get_int = int(get_value)
                    self.progressBar.setValue(get_int)
            except Empty:
                if self.progressBar.value() >= 100:
                    try:
                        while get_queue.get(timeout=1): pass
                    except Empty:
                        pass
                    self.progressBar.setValue(0)
                    self.get_message_timer.stop()
        else:
            #當實體連線到真的帳戶操作時
            try:
                get_value = get_queue.get(timeout=1)
                get_queue.task_done()
                self.textBrowser.append(get_value)
            except Empty:
                if self.Connect_real_account_Button.text == "連線實體帳戶":
                    self.get_message_timer.stop()
            
        
            
        

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec())
